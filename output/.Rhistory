library(rENA, warn.conflicts=F)
library(openxlsx, warn.conflicts=F)
library(htmltools, warn.conflicts=F)
library(plotly, warn.conflicts=F)
library(dplyr, warn.conflicts=F)
library(lme4, warn.conflicts=F)
# 读入xlsx编码结果数据
STEM.data = read.xlsx("C:\\wamp64\\www\\ena\\xlsx\\encode.xlsx", 1)
# 确定分析单位
units = STEM.data[,c("classID","gpID","gpNO")]
# 确定会话
conversation = as.data.frame(STEM.data[,c("classID","gpID","taskID")])
# 确定讨论内容的编码方案
codeCols = c("学情分析能力","学习目标设计能力","学习情境设计能力","知识内容设计能力","学习活动设计能力","技术整合能力","学习评价设计能力")
codes = STEM.data[,codeCols]
# 计算累计邻接向量，定义节的大小是5行
accum = ena.accumulate.data(units = units,conversation = conversation,codes = codes,window.size.back = 5)
# 计算绘制网络图的相关参数
set = ena.make.set(enadata = accum)
# 绘制各个分析单位的质心
target1.points = as.matrix(set$points[classID==1])
target2.points = as.matrix(set$points[classID==2])
enaplot = ena.plot(set, scale.to = "points", title = "Title")  %>%
ena.plot.group(point = target1.points, colors = c("#4bacc6"), confidence.interval = "box") %>%
ena.plot.group(point = target2.points, colors = c("#f79646"), confidence.interval = "box")
setwd("../output")
htmlwidgets::saveWidget(enaplot$plot, file="./output.html")
library(rENA, warn.conflicts=F)
library(openxlsx, warn.conflicts=F)
library(htmltools, warn.conflicts=F)
library(plotly, warn.conflicts=F)
library(dplyr, warn.conflicts=F)
library(lme4, warn.conflicts=F)
# 读入xlsx编码结果数据
STEM.data = read.xlsx("C:\\wamp64\\www\\ena\\xlsx\\encode.xlsx", 1)
# 确定分析单位
units = STEM.data[,c("classID","gpID","gpNO")]
# 确定会话
conversation = as.data.frame(STEM.data[,c("classID","gpID","taskID")])
# 确定讨论内容的编码方案
codeCols = c("学情分析能力","学习目标设计能力","学习情境设计能力","知识内容设计能力","学习活动设计能力","技术整合能力","学习评价设计能力")
codes = STEM.data[,codeCols]
# 计算累计邻接向量，定义节的大小是5行
accum = ena.accumulate.data(units = units,conversation = conversation,codes = codes,window.size.back = 5)
# 计算绘制网络图的相关参数
set = ena.make.set(enadata = accum)
# 绘制各个分析单位的质心
target1.points = as.matrix(set$points[classID==1])
target2.points = as.matrix(set$points[classID==2])
center1.points = as.matrix(set$points[classID==1])
center2.points = as.matrix(set$points[classID==2])
enaplot = ena.plot(set, scale.to = "points", title = "Title")  %>%
ena.plot.group(point = target1.points, colors = c("#4bacc6"), confidence.interval = "box") %>%
ena.plot.group(point = target2.points, colors = c("#f79646"), confidence.interval = "box") %>%
ena.plot.points(points = center1.points, colors = c("#4bacc6")) %>%
ena.plot.points(points = center2.points, colors = c("#f79646"))
setwd("../output")
htmlwidgets::saveWidget(enaplot$plot, file="./output.html")
library(rENA, warn.conflicts=F)
library(openxlsx, warn.conflicts=F)
library(htmltools, warn.conflicts=F)
library(plotly, warn.conflicts=F)
library(dplyr, warn.conflicts=F)
library(lme4, warn.conflicts=F)
# 读入xlsx编码结果数据
STEM.data = read.xlsx("C:\\wamp64\\www\\ena\\xlsx\\encode.xlsx", 1)
# 确定分析单位
units = STEM.data[,c("classID","gpID","gpNO")]
# 确定会话
conversation = as.data.frame(STEM.data[,c("classID","gpID","taskID")])
# 确定讨论内容的编码方案
codeCols = c("学情分析能力","学习目标设计能力","学习情境设计能力","知识内容设计能力","学习活动设计能力","技术整合能力","学习评价设计能力")
codes = STEM.data[,codeCols]
# 计算累计邻接向量，定义节的大小是5行
accum = ena.accumulate.data(units = units,conversation = conversation,codes = codes,window.size.back = 5)
# 计算绘制网络图的相关参数
set = ena.make.set(enadata = accum)
# 绘制各个分析单位的质心
target1.points = as.matrix(set$points[classID==1][gpID==1])
target2.points = as.matrix(set$points[classID==1][gpID==2])
target3.points = as.matrix(set$points[classID==1][gpID==3])
target4.points = as.matrix(set$points[classID==1][gpID==4])
center1.points = as.matrix(set$points[classID==1][gpID==1])
center2.points = as.matrix(set$points[classID==1][gpID==2])
center3.points = as.matrix(set$points[classID==1][gpID==3])
center4.points = as.matrix(set$points[classID==1][gpID==4])
enaplot = ena.plot(set, scale.to = "points", title = "Title")  %>%
ena.plot.group(point = target1.points, colors = c("#ff0000"), confidence.interval = "box") %>%
ena.plot.group(point = target2.points, colors = c("#ffc000"), confidence.interval = "box") %>%
ena.plot.group(point = target3.points, colors = c("#92d050"), confidence.interval = "box") %>%
ena.plot.group(point = target4.points, colors = c("#00b0f0"), confidence.interval = "box") %>%
ena.plot.points(points = center1.points, colors = c("#ff0000")) %>%
ena.plot.points(points = center2.points, colors = c("#ffc000")) %>%
ena.plot.points(points = center3.points, colors = c("#92d050")) %>%
ena.plot.points(points = center4.points, colors = c("#00b0f0"))
setwd("../output")
htmlwidgets::saveWidget(enaplot$plot, file="./output.html")
