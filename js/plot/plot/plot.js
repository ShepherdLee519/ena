function runR(){$.get("./php/runr.php",e=>{e&&console.log("runR finish!"),console.log(e),$("#sourcecode").html($("#sourcecode").html()+`\n\nOutput:\n${e}`),showIFrame()})}function showIFrame(){const e=$("#iframe");hide(e),e.attr("src",`./output/output.html?num=${random()}`),show([e,$("#iframeBtns")])}$(function(){listen("prepareCodes",runR),$("#generate").click(function(e){return e.preventDefault(),prepareRCodes(),!1}),$("#refreshIframe").click(()=>!$("#iframe").hasClass("hidden")&&(showIFrame(),!1)),$("#showSourcecode").click(()=>($("#sourcecode").toggleClass("hidden"),$("#iframe").toggleClass("hidden"),!1))});const rcodeConfig=rcodeConfigGenerator();function rcodeConfigGenerator(){return PRODUCTION?{dataPath:"/home/www/htdocs/ena/xlsx/",dataName:"encode.csv",outputName:"output.html",rPath:"../R/",rName:"ena_auto.R"}:{dataPath:"C:\\\\wamp64\\\\www\\\\ena\\\\xlsx\\\\",dataName:"encode.csv",outputName:"output.html",rPath:"../R/",rName:"ena_auto.R"}}const prepareRCodes=function(){function e(e){return`# ${e}\n`}return function(){let[t,n]=function(){let t="",n="";return["rENA","htmltools","plotly","dplyr"].forEach(e=>{t+=`library(${e}, warn.conflicts=F)\n`}),t+="\n",t+=e("读入xlsx编码结果数据"),t+=`STEM.data = read.csv("${rcodeConfig.dataPath}${rcodeConfig.dataName}", 1)\n\n`,n+='\n\nsetwd("../output")\n',n+=`htmlwidgets::saveWidget(enaplot$plot, file="./${rcodeConfig.outputName}")\n`,[t,n]}();t+=function(){let t="";const n=gatherParameter();return n.units.length&&(t+=e("确定分析单位"),t+=`units = STEM.data[,c(${decorateValues(n.units).join(",")})]\n\n`),n.conversation.length&&(t+=e("确定会话"),t+=`conversation = as.data.frame(STEM.data[,c(${decorateValues(n.conversation).join(",")})])\n\n`),n.codecols.length&&(t+=e("确定讨论内容的编码方案"),t+=`codeCols = c(${decorateValues(n.codecols).join(",")})\n`,t+="codes = STEM.data[,codeCols]\n\n"),n.windowsize&&(t+=e(`计算累计邻接向量，定义节的大小是${n.windowsize}行`),t+="accum = ena.accumulate.data(",t+="units = units,conversation = conversation,codes = codes,",t+=`window.size.back = ${n.windowsize})\n\n`,t+=e("计算绘制网络图的相关参数"),t+="set = ena.make.set(enadata = accum)\n\n"),t}(),t+=typeCodes(),function(e){const t=rcodeConfig.rPath+rcodeConfig.rName;$.get("./php/saver.php",{codes:e,path:t},t=>{t&&(console.log("saveCodes - successfully"),$("#sourcecode").html(e),trigger("prepareCodes",!0))})}(t+=n)}}(),typeCodes=function(){let e,t,n,o;function r(e){return`# ${e}\n`}function a(e,t){const n={target:"",color:e[t].color};let o=e[t].floor;const r=[];r.push(`${e[t].type}=='${e[t].value}'`);let a=t<e.length-1&&e[t+1].floor>o,c=t+1;if(a){for(let n=t+1;n<e.length;n++)if(e[n].floor<=o){c=n;break}c==t+1&&(c=e.length)}function s(n){let o=[],r=e[n].floor;for(let a=n;a>=t;a--)e[a].floor==r&&(o.push(`${e[a].type}=='${e[a].value}'`),r--);return`!(${o.reverse().join(" & ")})`}function l(t){const n=e[t].floor;if(t==e.length-1||e[t+1].floor<=n)return e.splice(t,1),void c--;let o=t,r=1;for(let o=t+1;o<c;o++)if(e[o].floor>n)r++;else if(e[o].floor==n)break;e.splice(o,r),c-=r}for(;a;){o++,a=!1;for(let n=t+1;n<c;n++)if(e[n].floor==o&&(a=!0,!e[n].check.center)){r.push(s(n)),l(n);break}for(let n=t+1;n<c;n++)if(e[n].floor==o&&!e[n].check.center){o--;break}}return e.splice(t,c-t),n.target=r.map(e=>`[${e}]`).join(""),n}function c(e){const t=[];if("center"!==e)o.forEach((n,r)=>{n.check[e]&&t.push(function(e,t){const n={target:"",color:e.color};let r=e.floor;const a=[];for(a.push({type:e.type,value:e.value});r;){r--;for(let e=t-1;e>=0;e--)if(o[e].floor==r){a.push({type:o[e].type,value:o[e].value});break}}for(let e=0;e<a.length;e++)a[e]=`${a[e].type}=='${a[e].value}'`;return n.target=a.reverse().map(e=>`[${e}]`).join(""),n}(n,r))});else{const e=[...o];let n=!0;do{n=!1;for(let o=0;o<e.length;o++)if(e[o].check.center){n=!0,t.push(a(e,o));break}}while(n)}return t}return function(){o=getAllTreeNodesData();const a=function(){[e,t,n]=function(e){const t=[];return["net","mean","center"].forEach(n=>{let o=!1;for(let t=0;t<e.length;t++)if(e[t].check[n]){o=!0;break}t.push(o)}),t}(o);let r="";return r=e&&t?"net_mean":e?"net":t?"mean":"center"}(),[s,l]=function(e){let[t,o]=[[],[]];switch(e){case"mean":case"net":case"center":t=c(e);break;case"net_mean":(t=[[],[]])[0]=c("net"),t[1]=c("mean")}return n&&"center"!==e&&(o=c("center")),[t,o]}(a);let i="";return i+=function(e,t,o){let a=r("绘制各个分析单位的质心");return"net_mean"!==o?e.forEach((e,t)=>{a+=`target${t+1}.points = as.matrix(set$points${e.target})\n`}):(e[0].forEach((e,t)=>{a+=`target0${t+1}.points = as.matrix(set$points${e.target})\n`}),e[1].forEach((e,t)=>{a+=`target1${t+1}.points = as.matrix(set$points${e.target})\n`})),n&&"center"!==o&&t.forEach((e,t)=>{a+=`center${t+1}.points = as.matrix(set$points${e.target})\n`}),a+="\n"}(s,l,a),i+=function(e,t){if("net"!==t&&"net_mean"!==t)return"";let n=r("网络图所有边的权重");return"net"===t?(e.forEach((e,t)=>{n+=`target${t+1}.lineweights = as.matrix(set$line.weights${e.target})\n`}),n+="\n"+r("计算所有分析单位在每条边的平均权重"),e.forEach((e,t)=>{n+=`target${t+1}.mean = as.vector(colMeans(target${t+1}.lineweights))\n`}),2==e.length&&(n+="\n"+r("每条边的权重差"),n+="subtracted.mean = target1.mean - target2.mean")):"net_mean"===t&&(e[0].forEach((e,t)=>{n+=`target0${t+1}.lineweights = as.matrix(set$line.weights${e.target})\n`}),n+="\n"+r("计算所有分析单位在每条边的平均权重"),e[0].forEach((e,t)=>{n+=`target0${t+1}.mean = as.vector(colMeans(target0${t+1}.lineweights))\n`}),2==e[0].length&&(n+="\n"+r("每条边的权重差"),n+="subtracted.mean = target01.mean - target02.mean\n")),n+="\n"}(s,a),i+=function(e,t,o){const r=$("#plotTitle").val()||$("#plotTitle").attr("placeholder");let a=[],c="net"===o||"net_mean"===o?`enaplot = ena.plot(set, font.size=15, title = "${r}")  %>%\n`:`enaplot = ena.plot(set, font.size=15, scale.to = "points", title = "${r}")  %>%\n`;function s(){n&&"center"!==o&&t.forEach((e,t)=>{a.push(`  ena.plot.points(points = center${t+1}.points, colors = c("${e.color}")) `)})}switch(o){case"center":e.forEach((e,t)=>{a.push(`  ena.plot.points(points = target${t+1}.points, colors = c("${e.color}")) `)}),c+=a.join("%>%\n"),c+="\n";break;case"mean":e.forEach((e,t)=>{a.push(`  ena.plot.group(point = target${t+1}.points, colors = c("${e.color}"), confidence.interval = "box") `)}),s(),c+=a.join("%>%\n"),c+="\n";break;case"net":1==e.length?a.push(`  ena.plot.network(network = target1.mean, colors = c("${e[0].color}"))`):(console.log("net - subtracted!"),a.push(`  ena.plot.network(network = subtracted.mean *8, colors = c("${e[0].color}","${e[1].color}"))`)),s(),c+=a.join("%>%\n"),c+="\n";break;case"net_mean":e[1].forEach((e,t)=>{a.push(`  ena.plot.group(point = target1${t+1}.points, colors = c("${e.color}"), confidence.interval = "box") `)}),s(),c+=a.join("%>%\n"),c+="%>%\n",1==e[0].length?c+=`  ena.plot.network(network = target01.mean, colors = c("${e[0][0].color}"))`:c+=`  ena.plot.network(network = subtracted.mean *8, colors = c("${e[0][0].color}","${e[0][1].color}"))`}return c}(s,l,a)}}();